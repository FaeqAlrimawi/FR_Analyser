# Signature

#physical structure
ctrl Building = 0; #currently no connections to outside world
ctrl Floor = 2; #connections can define upper and lower floors 
##Rooms
ctrl Room = 1; #could define an AC room, or room A in the floor (AC room, room A)
ctrl Hallway = 4;#30; #number of connections to the rooms in the floor
#ctrl Lab = 1; #control refers to labs that has one connection to hallway (12 labs)
ctrl Room_2 = 2; #control refers to labs that has two connection to hallway (1 lab)
#ctrl Lab_2 = 2; #control refers to labs that has two connection to hallway (1 lab)
ctrl Room_4 = 4; #control refers to labs that has four connection to hallway (2 labs)
#ctrl Lab_4 = 4; #control refers to labs that has four connection to hallway (2 labs)
#ctrl Toilet = 1; #connection to hallway (3 toilets)
#ctrl Kitchen = 2; #connections to hallway and AC room (1 kitchen)
#ctrl Lounge = 2;# (1 lounge)
#ctrl Stairs = 1; # (2 stairs)
#ctrl ElevatorsArea = 2; # 1 area

##computingDevices
ctrl Elevator = 1; #(7 in total: 6 elevators in elevator area and 1 emergency elevator)
ctrl Desktop = 1; # (15 desktops)
ctrl Server = 1; # (2 servers, 1 in informatics lab the other in the empirical lab)
atomic ctrl SmartLight = 1;
ctrl HVAC = 1;
atomic ctrl FireAlarm = 1;
atomic ctrl Workstation = 1;
ctrl Laptop = 1;
ctrl CardReader = 1;
ctrl CCTV = 1;
ctrl ComputingDevice = 1;

#Digital structure
ctrl IPNetwork = 1; #defines 10 connections to desktops
ctrl BusNetwork = 1; # 5 should be changed to the right number
atomic ctrl Data = 0; # could be packets
atomic ctrl Malware = 0;
atomic ctrl Software = 0; #could be programs/processes, something that executes
atomic ctrl Status_On = 0;
atomic ctrl Status_Off = 0;

#Actors
ctrl Visitor = 0;
ctrl Actor = 0;

#Connections
ctrl PhysicalConnection = 1;
ctrl IPConnection = 1;
ctrl BusConnection = 1;

#context (defines some constrains over rules)
ctrl Context = 1; #context contains one of the below states of working (workinghours, cardehours, and closedhours)
atomic ctrl WorkingHours = 0; # defines the period between 8:30-19:00 as working hours
atomic ctrl OutsideWorkingHours = 0; #defines the period between 19:00=22:00 as card required to access rooms
atomic ctrl CardRequired = 0; 
atomic ctrl NoCard = 0; 
atomic ctrl ClosedHours = 0; #defines the period between 22:00-8:30 as Closed hours
atomic ctrl ClosedHours_2 = 0; #defines the period between 19:00-8:30 as Closed hours


#keywords for the reaction rules
atomic ctrl EnterRoom = 0;
atomic ctrl EnterRoomWithoutCardReader = 0;
atomic ctrl ExitRoom = 0;
atomic ctrl ConnectIPDevice = 0;
atomic ctrl DisconnectIPDevice = 0;
atomic ctrl ConnectBusDevice = 0;
atomic ctrl DisconnectBusDevice = 0;
atomic ctrl GenerateData = 0;
atomic ctrl CollectData = 0;
atomic ctrl SendData = 0;
atomic ctrl DisableHVAC = 0;
ctrl RulesKeywords = 0;

#initial state

#digital components
big busNetwork = BusNetwork{busNet}.1;
big ipNetwork = IPNetwork{ipNet}.1;

#physical components
big visitor_initial = Visitor.(/a Laptop{a}.Malware);

big hvac = HVAC{busNet}.Status_On;

#different connections defined since a room can have more than one door
big connection_to_hallway1 = PhysicalConnection{hallway1}.NoCard;
big connection_to_hallway2 = PhysicalConnection{hallway2}.NoCard;
big connection_to_hallway3 = PhysicalConnection{hallway3}.NoCard;
big connection_to_hallway4 = PhysicalConnection{hallway4}.NoCard;

big connection_to_hallway1_card_required = PhysicalConnection{hallway1}.CardRequired;
big connection_to_hallway2_card_required = PhysicalConnection{hallway2}.CardRequired; 
big connection_to_hallway3_card_required = PhysicalConnection{hallway3}.CardRequired;
big connection_to_hallway4_card_required = PhysicalConnection{hallway4}.CardRequired;


big connection_to_elevators_area = PhysicalConnection{elevator}.NoCard;

big instructors_lab = Room{hallway1}.( SmartLight{busNet} | hvac | CardReader{busNet}.1 |
 Desktop{ipNet}.1 | Desktop{ipNet}.1);

big informatics_lab = Room_4{hallway1,hallway2,hallway3,hallway4}
.(Server{ipNet}.1 | SmartLight{busNet} | hvac |
CardReader{busNet}.1| CardReader{busNet}.1| CardReader{busNet}.1| CardReader{busNet}.1
);

big openLab = Room_2{hallway1, hallway2}
.( hvac | CardReader{busNet}.1| CardReader{busNet}.1);

big kitchen = Room_2{hallway1, hallway2}
.(SmartLight{busNet} | hvac);

big hvac_room = Room{hallway1}.(hvac | SmartLight{busNet} | CardReader{busNet}.1);

big toilet = Room{hallway1}.(SmartLight{busNet} | hvac);

big lounge = Room_2{hallway1, hallway2}.(SmartLight{busNet} | hvac);

big elevators_area = Room_2{hallway1, elevator}
.(Elevator{elevator}.1 | Elevator{elevator}.1 | Elevator{elevator}.1 
| Elevator{elevator}.1 | Elevator{elevator}.1 | Elevator{elevator}.1 | CardReader{busNet}.1 ); 

big meeting_room = Room{hallway1}.(SmartLight{busNet});


big hallway = Hallway{hallway1,hallway2,hallway3, hallway4}
.(CCTV{busNet}.1 | visitor_initial);

big connections = connection_to_hallway1 | connection_to_hallway2 | connection_to_hallway3 | connection_to_hallway4
					| connection_to_hallway1_card_required | connection_to_hallway2_card_required | 
					connection_to_hallway3_card_required | connection_to_hallway4_card_required;

big context = Context{c}.(WorkingHours);
#big stairs = ;

big actions = RulesKeywords.(EnterRoom | ExitRoom | ConnectIPDevice | DisconnectIPDevice | ConnectBusDevice | DisconnectBusDevice | 
 SendData | DisableHVAC | EnterRoomWithoutCardReader);
 
#initial state
big research_centre = Building.( 
Floor{lowerFloor, upperFloor}.(
instructors_lab |
instructors_lab |
instructors_lab |
instructors_lab |
instructors_lab |
instructors_lab |
instructors_lab |
instructors_lab |
informatics_lab |
informatics_lab |
kitchen         |
hvac_room       | 
toilet          |
toilet          |
toilet          |
lounge          |
elevators_area  |
meeting_room    |
hallway )
|
busNetwork |
ipNetwork 
)
|| 
connections
||
context
||
actions
;        
#EnterInstructorsLab | ExitInstructorsLab | EnterKitchen | ExitKitchen | EnterLounge | ExitLounge |

#visitor states
big visitor = Visitor.id;
big visitor_laptop = Visitor.(/a Laptop{a} | id);
big visitor_connected_to_IP = Visitor.(Laptop{ipNet}.id | id);
big visitor_connected_to_bus = Visitor.(Laptop{busNet}.id | id);
big visitor_connected_to_bus_with_malware = Visitor.(Laptop{busNet}.(id | Malware) | id);

#actor states
big actor_connected_to_IP = Actor.(ComputingDevice{ipNet} | id);
big actor_connected_to_bus = Actor.(ComputingDevice{busNet} | id);
big actor_connected_to_bus_with_data = Actor.(ComputingDevice{busNet}.(id | Data) | id);

#offender target
big malware_target = HVAC{busNet} | Server{ipNet} ;
big malware_target_infected = HVAC{busNet}.(Malware | id) | Server{ipNet} ;
big malware_target_disabled = HVAC{busNet}.(Malware | Status_Off) | Server{ipNet} ;

big hallway_visitor = Hallway{hallway1,hallway2,hallway3, hallway4}.(id | visitor);
big hallway_general = Hallway{hallway1,hallway2,hallway3, hallway4}.id;

#context
big context_working_hours  =Context{c}.WorkingHours;
big context_outside_working_hours = Context{c}.OutsideWorkingHours;

#room in general
big room_general = Room{hallway1};

#enter room action
react enter_room_during_working_hours = 
hallway_visitor | room_general || connection_to_hallway1 || context_working_hours || RulesKeywords.(EnterRoom | id)
->
hallway_general | Room{hallway1}.(visitor | id) || connection_to_hallway1 || context_working_hours  || RulesKeywords.(id)
;

#exit room action
react exit_room = 
hallway_general | Room{hallway1}.(visitor | id) || connection_to_hallway1 || RulesKeywords.(ExitRoom | id)
->
hallway_visitor | Room{hallway1}.id  || connection_to_hallway1 || RulesKeywords.(id)
;

#enter room action after working hours
react enter_room_outside_working_hours = 
hallway_visitor | Room{hallway1}.(CardReader{busNet} | id) || connection_to_hallway1_card_required || context_outside_working_hours || RulesKeywords.(EnterRoom | id)
->
hallway_general | Room{hallway1}.(visitor | CardReader{busNet} | id) || connection_to_hallway1_card_required || context_outside_working_hours  || RulesKeywords.(id)
;

#enter room without a card reader after working hours
react enter_room_outside_working_hours_without_cardreader = 
hallway_visitor | Room{hallway1} || connection_to_hallway1 || context_outside_working_hours || RulesKeywords.(EnterRoomWithoutCardReader | id)
->
hallway_general | Room{hallway1}.(visitor | id) || connection_to_hallway1 || context_outside_working_hours  || RulesKeywords.(id)
;

#enter room with two doors
react enter_room_2 = 
hallway_visitor | Room_2{hallway1,hallway2} || RulesKeywords.(EnterRoom | id)
->
hallway_general | Room_2{hallway1,hallway2}.(visitor | id) || RulesKeywords.(id)
;

#exit room with two doors
react exit_room_2 = 
hallway_general | Room_2{hallway1, hallway2}.(visitor | id) || RulesKeywords.(ExitRoom | id)
->
hallway_visitor | Room_2{hallway1, hallway2}.id  || RulesKeywords.(id)
;

#enter room with four doors
react enter_room_4 = 
hallway_visitor | Room_4{hallway1,hallway2,hallway3, hallway4} || RulesKeywords.(EnterRoom | id)
->
hallway_general | Room_4{hallway1,hallway2,hallway3, hallway4}.(visitor | id) || RulesKeywords.(id)
;

#exit room with four doors
react exit_room_4 = 
hallway_general | Room_4{hallway1,hallway2,hallway3, hallway4}.(visitor | id) || RulesKeywords.(ExitRoom | id)
->
hallway_visitor | Room_4{hallway1,hallway2,hallway3, hallway4}.id  || RulesKeywords.(id)
;

#connect to desktop
react connect_to_desktop = 
visitor_laptop | Desktop{ipNet} || RulesKeywords.(ConnectIPDevice | id)
->
visitor_connected_to_IP | Desktop{ipNet} || RulesKeywords.(id)
;

#disconnect to desktop
react disconnect_from_desktop = 
visitor_connected_to_IP | Desktop{ipNet} || RulesKeywords.(DisconnectIPDevice | id)
->
visitor_laptop | Desktop{ipNet} || RulesKeywords.(id)
;


#connect to smart light
react connect_to_smartlight = 
visitor_laptop | SmartLight{busNet} || RulesKeywords.(ConnectBusDevice | id)
->
visitor_connected_to_bus | SmartLight{busNet} || RulesKeywords.(id)
;

#disconnect from smart light
react disconnect_from_smartlight = 
visitor_connected_to_bus | SmartLight{busNet} || RulesKeywords.(DisconnectBusDevice | id)
->
visitor_laptop | SmartLight{busNet} || RulesKeywords.(id)
;

#connect to hvac
react connect_to_hvac = 
visitor_laptop | HVAC{busNet} || RulesKeywords.(ConnectBusDevice | id)
->
visitor_connected_to_bus | HVAC{busNet} || RulesKeywords.(id)
;

#disconnect from hvac
react disconnect_from_hvac = 
visitor_connected_to_bus | HVAC{busNet} || RulesKeywords.(DisconnectBusDevice | id)
->
visitor_laptop | HVAC{busNet} || RulesKeywords.(id)
;

#connect to fire alarm
react connect_to_firealarm = 
visitor_laptop | FireAlarm{busNet} || RulesKeywords.(ConnectBusDevice | id)
->
visitor_connected_to_bus | FireAlarm{busNet} || RulesKeywords.(id)
;

#disconnect from fire alarm
react disconnect_from_firealarm = 
visitor_connected_to_bus | FireAlarm{busNet} || RulesKeywords.(DisconnectBusDevice | id)
->
visitor_laptop | FireAlarm{busNet} || RulesKeywords.(id)
;

#connect to computing device
react connect_to_computingdevice = 
visitor_laptop | ComputingDevice{busNet} || RulesKeywords.(ConnectBusDevice | id)
->
visitor_connected_to_bus | ComputingDevice{busNet} || RulesKeywords.(id)
;

#disconnect from computing device
react disconnect_from_computingdevice = 
visitor_connected_to_bus | ComputingDevice{busNet} || RulesKeywords.(DisconnectBusDevice | id)
->
visitor_laptop | ComputingDevice{busNet} || RulesKeywords.(id)
;

#if visitor laptop is connected then add a Data to it [actor action]
react actor_generate_data = 
actor_connected_to_bus || RulesKeywords.(GenerateData | id)
->
actor_connected_to_bus_with_data || RulesKeywords.(id);

#if visitor laptop is connected then send Data (could be software) to hvac [actor action]
react actor_send_data = 
actor_connected_to_bus_with_data  || HVAC{busNet} || RulesKeywords.(SendData | id)
->
actor_connected_to_bus  ||  HVAC{busNet}.(Data |  id) || RulesKeywords.(id)
;

#if visitor laptop is connected then send malware to hvac, which its container has server [malicious action]
react visitor_send_malware = 
visitor_connected_to_bus_with_malware  || malware_target || RulesKeywords.(SendData | id)
->
visitor_connected_to_bus || malware_target_infected || RulesKeywords.(id)
;

#malware disables hvac [malicious action]
react disable_hvac = 
malware_target_infected || RulesKeywords.(DisableHVAC | id)
->
malware_target_disabled || RulesKeywords.(id)
@[1,2]
;

#change context
react change_to_outside_working_hours = 
context_working_hours 
->
context_outside_working_hours;

#change access to rooms to reuqire card
react change_access_to_card_required = 
context_outside_working_hours || Room{hallway1}.(CardReader{busNet} | id) || connection_to_hallway1
->
context_outside_working_hours || Room{hallway1}.(CardReader{busNet} | id) || connection_to_hallway1_card_required;


react change_to_working_hours = 
context_outside_working_hours
->
context_working_hours
;

#change access to rooms to card not required
react change_access_to_card_not_required = 
context_working_hours || Room{hallway1}.(CardReader{busNet} | id) || connection_to_hallway1_card_required
->
context_outside_working_hours || Room{hallway1}.(CardReader{busNet} | id) || connection_to_hallway1
;

#Reactive system
begin brs
  init research_centre;
  rules = 
  [ 
  {
  enter_room_during_working_hours, enter_room_outside_working_hours, exit_room
  , enter_room_2, exit_room_2
  , enter_room_4, exit_room_4
  , connect_to_desktop, disconnect_from_desktop
  , connect_to_smartlight, disconnect_from_smartlight
  , connect_to_hvac, disconnect_from_hvac
  , connect_to_firealarm, disconnect_from_firealarm
  , connect_to_computingdevice, disconnect_from_computingdevice
  , actor_generate_data
  , actor_send_data
  , visitor_send_malware
  , disable_hvac
  , change_to_outside_working_hours, change_to_working_hours
  , change_access_to_card_required, change_access_to_card_not_required
  } 
 ,
 {enter_room_outside_working_hours_without_cardreader}
  ];

end





